/*–ó–∞–¥–∞—á–∞ 1. 
–î–∞–Ω–æ –∫–ª–∞—Å PhoneNumber. 
–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ string, –ø—Ä–∏ —è–∫–æ–º—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–º–µ—Ä–∞ –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä (050‚Ä¶.  ü°™ MTC, 096‚Ä¶ ü°™ Kyivstar, ‚Ä¶.)

*/
class PhoneNumber {
  constructor(number) {
      this.number = number;
  }

  [Symbol.toPrimitive](hint) {
      if (hint === 'string') {
          return this.getOperator();
      }
      return this.number;
  }

  getOperator() {
      // –°–ª–æ–≤–Ω–∏–∫ –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤ —Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤
      const operators = {
          '050': '–ú–¢–°',
          '095': 'Vodafone',
          '066': 'Vodafone',
          '099': 'Vodafone',
          '067': '–ö–∏—ó–≤—Å—Ç–∞—Ä',
          '096': '–ö–∏—ó–≤—Å—Ç–∞—Ä',
          '097': '–ö–∏—ó–≤—Å—Ç–∞—Ä',
          '098': '–ö–∏—ó–≤—Å—Ç–∞—Ä',
          '063': 'lifecell',
          '073': 'lifecell',
          '093': 'lifecell',
      };

      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à—ñ —Ç—Ä–∏ —Ü–∏—Ñ—Ä–∏ –Ω–æ–º–µ—Ä–∞
      const prefix = this.number.toString().slice(0, 3);

      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–∑–≤—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ '–ù–µ–≤—ñ–¥–æ–º–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä'
      return operators[prefix] || '–ù–µ–≤—ñ–¥–æ–º–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä';
  }
}

// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
const phone1 = new PhoneNumber('0501234567');
const phone2 = new PhoneNumber('0967654321');
const phone3 = new PhoneNumber('0939876543');
const phone4 = new PhoneNumber('0800123456'); // –ù–µ–≤—ñ–¥–æ–º–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä

console.log(`${phone1}`); 
console.log(`${phone2}`); 
console.log(`${phone3}`);
console.log(`${phone4}`); 